@page "/salessummary"
@using SalesManagement.UI.Services
@inject SalesService SalesService
@rendermode InteractiveServer

<h3>Total Sales Summary</h3>

<div class="summary-selection">
	<label for="summaryType">Select sales summary by type:</label>
	<select id="summaryType" @onchange="OnSummaryTypeChanged">
		<option value="country">Country</option>
		<option value="product">Product</option>
		<option value="segment">Segment</option>
	</select>
</div>

<br/>
<p>Selected summary type: @_selectedSummaryType</p>

@if (!_salesRecords.Any())
{
	<p>No sales records found.</p>
}
else
{
	<table class="table">
		<thead>
		<tr>
			<th>Summary Item</th>
			<th>Total Units Sold</th>
			<th>Total Manufacturing Price</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var record in _salesRecords)
		{
			<tr>
				<td>@record.SummaryKey</td>
				<td>@record.UnitsSold</td>
				<td>@record.ManufacturingPriceConverted</td>
			</tr>
		}
		</tbody>
	</table>
}

@code {
	private List<SalesSummaryRecord>? _salesRecords = [];
	private string? _selectedSummaryType = "country";

	protected override async Task OnInitializedAsync()
	{
		await LoadSummaryData();
	}

	public async Task OnSummaryTypeChanged(ChangeEventArgs e)
	{
		_selectedSummaryType = e.Value?.ToString();
		await LoadSummaryData();
	}

	private async Task LoadSummaryData()
	{
		_salesRecords = await SalesService.GetTotalSalesSummary(_selectedSummaryType);
	}
}